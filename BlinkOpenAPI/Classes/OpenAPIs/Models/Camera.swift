//
// Camera.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Camera: Codable, Hashable {

    public enum Status: String, Codable, CaseIterable {
        case done = "done"
        case offline = "offline"
    }
    public enum Battery: String, Codable, CaseIterable {
        case ok = "ok"
        case low = "low"
    }
    public var id: Int
    public var createdAt: Date
    public var updatedAt: Date
    public var name: String
    public var serial: String
    public var fwVersion: String
    public var type: String
    public var enabled: Bool
    public var thumbnail: String
    public var status: Status
    public var battery: Battery
    public var usageRate: Bool
    public var networkId: Int
    public var issues: [Issue]
    public var signals: CameraSignals
    public var localStorageEnabled: Bool
    public var localStorageCompatible: Bool

    public init(id: Int, createdAt: Date, updatedAt: Date, name: String, serial: String, fwVersion: String, type: String, enabled: Bool, thumbnail: String, status: Status, battery: Battery, usageRate: Bool, networkId: Int, issues: [Issue], signals: CameraSignals, localStorageEnabled: Bool, localStorageCompatible: Bool) {
        self.id = id
        self.createdAt = createdAt
        self.updatedAt = updatedAt
        self.name = name
        self.serial = serial
        self.fwVersion = fwVersion
        self.type = type
        self.enabled = enabled
        self.thumbnail = thumbnail
        self.status = status
        self.battery = battery
        self.usageRate = usageRate
        self.networkId = networkId
        self.issues = issues
        self.signals = signals
        self.localStorageEnabled = localStorageEnabled
        self.localStorageCompatible = localStorageCompatible
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case createdAt = "created_at"
        case updatedAt = "updated_at"
        case name
        case serial
        case fwVersion = "fw_version"
        case type
        case enabled
        case thumbnail
        case status
        case battery
        case usageRate = "usage_rate"
        case networkId = "network_id"
        case issues
        case signals
        case localStorageEnabled = "local_storage_enabled"
        case localStorageCompatible = "local_storage_compatible"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encode(updatedAt, forKey: .updatedAt)
        try container.encode(name, forKey: .name)
        try container.encode(serial, forKey: .serial)
        try container.encode(fwVersion, forKey: .fwVersion)
        try container.encode(type, forKey: .type)
        try container.encode(enabled, forKey: .enabled)
        try container.encode(thumbnail, forKey: .thumbnail)
        try container.encode(status, forKey: .status)
        try container.encode(battery, forKey: .battery)
        try container.encode(usageRate, forKey: .usageRate)
        try container.encode(networkId, forKey: .networkId)
        try container.encode(issues, forKey: .issues)
        try container.encode(signals, forKey: .signals)
        try container.encode(localStorageEnabled, forKey: .localStorageEnabled)
        try container.encode(localStorageCompatible, forKey: .localStorageCompatible)
    }
}

