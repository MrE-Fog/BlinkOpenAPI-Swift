//
// Media.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Media: Codable, Hashable {

    public enum Device: String, Codable, CaseIterable {
        case camera = "camera"
        case owl = "owl"
    }
    public enum ModelType: String, Codable, CaseIterable {
        case video = "video"
    }
    public enum Source: String, Codable, CaseIterable {
        case liveview = "liveview"
        case pir = "pir"
    }
    public var id: Int
    public var createdAt: Date
    public var updatedAt: Date
    public var deleted: Bool
    public var device: Device
    public var deviceId: Int
    public var deviceName: String
    public var networkId: Int
    public var networkName: String
    public var type: ModelType
    public var source: Source
    public var watched: Bool
    public var partial: Bool?
    public var thumbnail: String
    public var media: String
    public var timeZone: String

    public init(id: Int, createdAt: Date, updatedAt: Date, deleted: Bool, device: Device, deviceId: Int, deviceName: String, networkId: Int, networkName: String, type: ModelType, source: Source, watched: Bool, partial: Bool?, thumbnail: String, media: String, timeZone: String) {
        self.id = id
        self.createdAt = createdAt
        self.updatedAt = updatedAt
        self.deleted = deleted
        self.device = device
        self.deviceId = deviceId
        self.deviceName = deviceName
        self.networkId = networkId
        self.networkName = networkName
        self.type = type
        self.source = source
        self.watched = watched
        self.partial = partial
        self.thumbnail = thumbnail
        self.media = media
        self.timeZone = timeZone
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case createdAt = "created_at"
        case updatedAt = "updated_at"
        case deleted
        case device
        case deviceId = "device_id"
        case deviceName = "device_name"
        case networkId = "network_id"
        case networkName = "network_name"
        case type
        case source
        case watched
        case partial
        case thumbnail
        case media
        case timeZone = "time_zone"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encode(updatedAt, forKey: .updatedAt)
        try container.encode(deleted, forKey: .deleted)
        try container.encode(device, forKey: .device)
        try container.encode(deviceId, forKey: .deviceId)
        try container.encode(deviceName, forKey: .deviceName)
        try container.encode(networkId, forKey: .networkId)
        try container.encode(networkName, forKey: .networkName)
        try container.encode(type, forKey: .type)
        try container.encode(source, forKey: .source)
        try container.encode(watched, forKey: .watched)
        try container.encode(partial, forKey: .partial)
        try container.encode(thumbnail, forKey: .thumbnail)
        try container.encode(media, forKey: .media)
        try container.encode(timeZone, forKey: .timeZone)
    }
}

