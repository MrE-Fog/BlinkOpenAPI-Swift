//
// BlinkDefaultAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if os(Linux)
import OpenCombine
#else
#if canImport(Combine)
import Combine
#endif
#endif

open class BlinkDefaultAPI {
    /**

     - parameter networkID: (path)  
     - parameter cameraID: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<InitialCommandResponse, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func disableCamera(networkID: Int, cameraID: Int, apiResponseQueue: DispatchQueue = BlinkOpenAPIAPI.apiResponseQueue) -> AnyPublisher<InitialCommandResponse, Error> {
        return Future<InitialCommandResponse, Error>.init { promise in
            disableCameraWithRequestBuilder(networkID: networkID, cameraID: cameraID).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif

    /**
     - POST /network/{networkID}/camera/{cameraID}/disable
     - parameter networkID: (path)  
     - parameter cameraID: (path)  
     - returns: RequestBuilder<InitialCommandResponse> 
     */
    open class func disableCameraWithRequestBuilder(networkID: Int, cameraID: Int) -> RequestBuilder<InitialCommandResponse> {
        var path = "/network/{networkID}/camera/{cameraID}/disable"
        let networkIDPreEscape = "\(APIHelper.mapValueToPathItem(networkID))"
        let networkIDPostEscape = networkIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{networkID}", with: networkIDPostEscape, options: .literal, range: nil)
        let cameraIDPreEscape = "\(APIHelper.mapValueToPathItem(cameraID))"
        let cameraIDPostEscape = cameraIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{cameraID}", with: cameraIDPostEscape, options: .literal, range: nil)
        let URLString = BlinkOpenAPIAPI.basePath + path
        let parameters: [String: Any]? = nil

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<InitialCommandResponse>.Type = BlinkOpenAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter networkID: (path)  
     - parameter cameraID: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<InitialCommandResponse, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func enableCamera(networkID: Int, cameraID: Int, apiResponseQueue: DispatchQueue = BlinkOpenAPIAPI.apiResponseQueue) -> AnyPublisher<InitialCommandResponse, Error> {
        return Future<InitialCommandResponse, Error>.init { promise in
            enableCameraWithRequestBuilder(networkID: networkID, cameraID: cameraID).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif

    /**
     - POST /network/{networkID}/camera/{cameraID}/enable
     - parameter networkID: (path)  
     - parameter cameraID: (path)  
     - returns: RequestBuilder<InitialCommandResponse> 
     */
    open class func enableCameraWithRequestBuilder(networkID: Int, cameraID: Int) -> RequestBuilder<InitialCommandResponse> {
        var path = "/network/{networkID}/camera/{cameraID}/enable"
        let networkIDPreEscape = "\(APIHelper.mapValueToPathItem(networkID))"
        let networkIDPostEscape = networkIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{networkID}", with: networkIDPostEscape, options: .literal, range: nil)
        let cameraIDPreEscape = "\(APIHelper.mapValueToPathItem(cameraID))"
        let cameraIDPostEscape = cameraIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{cameraID}", with: cameraIDPostEscape, options: .literal, range: nil)
        let URLString = BlinkOpenAPIAPI.basePath + path
        let parameters: [String: Any]? = nil

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<InitialCommandResponse>.Type = BlinkOpenAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter media: (path) Media URL 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<URL, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getThumbnail(media: String, apiResponseQueue: DispatchQueue = BlinkOpenAPIAPI.apiResponseQueue) -> AnyPublisher<URL, Error> {
        return Future<URL, Error>.init { promise in
            getThumbnailWithRequestBuilder(media: media).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif

    /**
     - GET /{media}.jpg
     - parameter media: (path) Media URL 
     - returns: RequestBuilder<URL> 
     */
    open class func getThumbnailWithRequestBuilder(media: String) -> RequestBuilder<URL> {
        var path = "/{media}.jpg"
        let mediaPreEscape = "\(APIHelper.mapValueToPathItem(media))"
        let mediaPostEscape = mediaPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{media}", with: mediaPostEscape, options: .literal, range: nil)
        let URLString = BlinkOpenAPIAPI.basePath + path
        let parameters: [String: Any]? = nil

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<URL>.Type = BlinkOpenAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter media: (path) Media URL 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<URL, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getVideo(media: String, apiResponseQueue: DispatchQueue = BlinkOpenAPIAPI.apiResponseQueue) -> AnyPublisher<URL, Error> {
        return Future<URL, Error>.init { promise in
            getVideoWithRequestBuilder(media: media).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif

    /**
     - GET /{media}
     - parameter media: (path) Media URL 
     - returns: RequestBuilder<URL> 
     */
    open class func getVideoWithRequestBuilder(media: String) -> RequestBuilder<URL> {
        var path = "/{media}"
        let mediaPreEscape = "\(APIHelper.mapValueToPathItem(media))"
        let mediaPostEscape = mediaPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{media}", with: mediaPostEscape, options: .literal, range: nil)
        let URLString = BlinkOpenAPIAPI.basePath + path
        let parameters: [String: Any]? = nil

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<URL>.Type = BlinkOpenAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter accountID: (path) Account ID 
     - parameter since: (query)  
     - parameter page: (query) Page number for multiple pages of results 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<VideoEvents, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getVideoEvents(accountID: Int, since: Date, page: Int, apiResponseQueue: DispatchQueue = BlinkOpenAPIAPI.apiResponseQueue) -> AnyPublisher<VideoEvents, Error> {
        return Future<VideoEvents, Error>.init { promise in
            getVideoEventsWithRequestBuilder(accountID: accountID, since: since, page: page).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif

    /**
     - GET /api/v1/accounts/{accountID}/media/changed
     - parameter accountID: (path) Account ID 
     - parameter since: (query)  
     - parameter page: (query) Page number for multiple pages of results 
     - returns: RequestBuilder<VideoEvents> 
     */
    open class func getVideoEventsWithRequestBuilder(accountID: Int, since: Date, page: Int) -> RequestBuilder<VideoEvents> {
        var path = "/api/v1/accounts/{accountID}/media/changed"
        let accountIDPreEscape = "\(APIHelper.mapValueToPathItem(accountID))"
        let accountIDPostEscape = accountIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{accountID}", with: accountIDPostEscape, options: .literal, range: nil)
        let URLString = BlinkOpenAPIAPI.basePath + path
        let parameters: [String: Any]? = nil

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "since": since.encodeToJSON(),
            "page": page.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<VideoEvents>.Type = BlinkOpenAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter accountID: (path) Account ID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<HomeScreenResponse, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func homescreen(accountID: Int, apiResponseQueue: DispatchQueue = BlinkOpenAPIAPI.apiResponseQueue) -> AnyPublisher<HomeScreenResponse, Error> {
        return Future<HomeScreenResponse, Error>.init { promise in
            homescreenWithRequestBuilder(accountID: accountID).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif

    /**
     - GET /api/v3/accounts/{accountID}/homescreen
     - parameter accountID: (path) Account ID 
     - returns: RequestBuilder<HomeScreenResponse> 
     */
    open class func homescreenWithRequestBuilder(accountID: Int) -> RequestBuilder<HomeScreenResponse> {
        var path = "/api/v3/accounts/{accountID}/homescreen"
        let accountIDPreEscape = "\(APIHelper.mapValueToPathItem(accountID))"
        let accountIDPostEscape = accountIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{accountID}", with: accountIDPostEscape, options: .literal, range: nil)
        let URLString = BlinkOpenAPIAPI.basePath + path
        let parameters: [String: Any]? = nil

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<HomeScreenResponse>.Type = BlinkOpenAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter loginRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<LoginResponse, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func login(loginRequest: LoginRequest, apiResponseQueue: DispatchQueue = BlinkOpenAPIAPI.apiResponseQueue) -> AnyPublisher<LoginResponse, Error> {
        return Future<LoginResponse, Error>.init { promise in
            loginWithRequestBuilder(loginRequest: loginRequest).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif

    /**
     - POST /api/v5/account/login
     - parameter loginRequest: (body)  
     - returns: RequestBuilder<LoginResponse> 
     */
    open class func loginWithRequestBuilder(loginRequest: LoginRequest) -> RequestBuilder<LoginResponse> {
        let path = "/api/v5/account/login"
        let URLString = BlinkOpenAPIAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: loginRequest)

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<LoginResponse>.Type = BlinkOpenAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter accountID: (path) Account ID 
     - parameter clientID: (path) Client ID 
     - parameter verifyPinRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AnyPublisher<VerifyPinResponse, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func verifyPin(accountID: Int, clientID: Int, verifyPinRequest: VerifyPinRequest, apiResponseQueue: DispatchQueue = BlinkOpenAPIAPI.apiResponseQueue) -> AnyPublisher<VerifyPinResponse, Error> {
        return Future<VerifyPinResponse, Error>.init { promise in
            verifyPinWithRequestBuilder(accountID: accountID, clientID: clientID, verifyPinRequest: verifyPinRequest).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif

    /**
     - POST /api/v4/account/{accountID}/client/{clientID}/pin/verify
     - parameter accountID: (path) Account ID 
     - parameter clientID: (path) Client ID 
     - parameter verifyPinRequest: (body)  
     - returns: RequestBuilder<VerifyPinResponse> 
     */
    open class func verifyPinWithRequestBuilder(accountID: Int, clientID: Int, verifyPinRequest: VerifyPinRequest) -> RequestBuilder<VerifyPinResponse> {
        var path = "/api/v4/account/{accountID}/client/{clientID}/pin/verify"
        let accountIDPreEscape = "\(APIHelper.mapValueToPathItem(accountID))"
        let accountIDPostEscape = accountIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{accountID}", with: accountIDPostEscape, options: .literal, range: nil)
        let clientIDPreEscape = "\(APIHelper.mapValueToPathItem(clientID))"
        let clientIDPostEscape = clientIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{clientID}", with: clientIDPostEscape, options: .literal, range: nil)
        let URLString = BlinkOpenAPIAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: verifyPinRequest)

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<VerifyPinResponse>.Type = BlinkOpenAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

}
